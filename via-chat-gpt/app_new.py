import os
import base64
import subprocess
from dash import Dash, dcc, html, Input, Output, State
import dash_bootstrap_components as dbc
import flask
from difflib import ndiff
from dotenv import load_dotenv

load_dotenv()

# Initialize Dash app
app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])
app.title = "ARCANE"
server = app.server

# Layout
app.layout = dbc.Container([
    html.H1("ARCANE", className="text-center my-4"),
    dbc.Row([
        dbc.Col([
            dcc.Upload(
                id="upload-file",
                children=html.Div([
                    "Drag and Drop or ",
                    html.A("Select a File")
                ]),
                style={
                    'width': '100%',
                    'height': '60px',
                    'lineHeight': '60px',
                    'borderWidth': '1px',
                    'borderStyle': 'dashed',
                    'borderRadius': '5px',
                    'textAlign': 'center',
                    'margin': '10px'
                },
                multiple=False
            ),
            html.Div(id="file-info", className="mt-3"),
            dbc.Button("Process File", id="process-btn", color="primary", className="mt-3", disabled=True),
            html.A("Download Generated File", id="download-link", href="", target="_blank", className="btn btn-secondary mt-3", style={"display": "none"})
        ], width=2, className="bg-light text-body"),
        dbc.Col([
            dcc.Tabs(id="tabs", children=[
                dcc.Tab(label="Doc AI Output", children=[
                    html.Div([
                        html.H5("Input File Content:", className="mt-3"),
                        dcc.Markdown(
                            id="input-content",
                            style={
                                "whiteSpace": "pre-wrap",
                                "backgroundColor": "#f8f9fa",
                                "padding": "10px",
                                "border": "1px solid #ddd",
                                "height": "40vh",
                                "overflowY": "auto"  # Added to prevent overflow
                            }
                        ),
                        html.H5("Generated by Doc AI:", className="mt-3"),
                        html.Div(
                            id="doc-ai-content",
                            style={
                                "whiteSpace": "pre-wrap",
                                "backgroundColor": "#f8f9fa",
                                "padding": "10px",
                                "border": "1px solid #ddd",
                                "height": "40vh",
                                "overflowY": "auto",  # Added to prevent overflow
                                "overflowX": "auto"
                            }
                        )
                    ])
                ]),
                dcc.Tab(label="Bug AI Output", children=[
                    html.Div([
                        html.H5("Input File Content:", className="mt-3"),
                        dcc.Markdown(
                            id="bug-ai-input-content",
                            style={
                                "whiteSpace": "pre-wrap",
                                "backgroundColor": "#f8f9fa",
                                "padding": "10px",
                                "border": "1px solid #ddd",
                                "height": "40vh",
                                "overflowY": "auto"  # Added to prevent overflow
                            }
                        ),
                        html.H5("Generated by Bug AI:", className="mt-3"),
                        html.Div(
                            id="bug-ai-content",
                            style={
                                "whiteSpace": "pre-wrap",
                                "backgroundColor": "#f8f9fa",
                                "padding": "10px",
                                "border": "1px solid #ddd",
                                "height": "40vh",
                                "overflowY": "auto",  # Added to prevent overflow
                                "overflowX": "auto"
                            }
                        )
                    ])
                ])
            ])
        ], width=10)
    ])
], fluid=True)

# Helper function to process files using subprocess
def process_ai_tool(tool_name, input_file_path, output_dir):
    os.makedirs(output_dir, exist_ok=True)
    try:
        subprocess.run([
            "python", tool_name, input_file_path, "--out-dir", output_dir
        ], check=True)

        output_file_path = os.path.join(output_dir, os.path.basename(input_file_path))
        if os.path.exists(output_file_path):
            with open(input_file_path, "r") as f:
                input_content = f.read().splitlines()
            with open(output_file_path, "r") as f:
                output_content = f.read().splitlines()

            # Find Differences
            diff = ndiff(input_content, output_content)
            diff_table = []
            for line in diff:
                if line.startswith("- "):
                    diff_table.append(html.Div(line[2:], style={"backgroundColor": "#ffcccc", "whiteSpace": "pre-wrap"}))
                elif line.startswith("+ "):
                    diff_table.append(html.Div(line[2:], style={"backgroundColor": "#ccffcc", "whiteSpace": "pre-wrap"}))
                else:
                    diff_table.append(html.Div(line[2:], style={"whiteSpace": "pre-wrap"}))

            return html.Div(diff_table, style={"fontFamily": "monospace", "border": "1px solid #ccc", "padding": "10px"})
        else:
            return "Output file not generated. Check your package."
    except subprocess.CalledProcessError as e:
        return f"Error processing file: {str(e)}"

# Callbacks
@app.callback(
    [Output("file-info", "children"), Output("input-content", "children"), Output("process-btn", "disabled")],
    [Input("upload-file", "contents")],
    [State("upload-file", "filename")]
)
def upload_file(contents, filename):
    if contents is None:
        return "No file uploaded yet.", "", True

    content_type, content_string = contents.split(",")
    decoded_content = base64.b64decode(content_string).decode("utf-8")

    file_path = os.path.join("temp", filename)
    os.makedirs("temp", exist_ok=True)

    with open(file_path, "w", newline="") as f:
        f.write(decoded_content)

    return f"Uploaded File: {filename}", f"```{filename.split('.')[-1]}\n{decoded_content}\n```", False

@app.callback(
    [Output("doc-ai-content", "children"),
     Output("bug-ai-content", "children"),
     Output("download-link", "href"),
     Output("download-link", "style")],
    [Input("process-btn", "n_clicks")],
    [State("upload-file", "filename")]
)
def process_file(n_clicks, filename):
    if not n_clicks or not filename:
        return "", "", "", {"display": "none"}

    input_file_path = os.path.join("temp", filename)
    doc_ai_output_dir = os.path.join("temp", "output_doc_ai")
    bug_ai_output_dir = os.path.join("temp", "output_bug_ai")

    doc_ai_content = process_ai_tool("doc_ai", input_file_path, doc_ai_output_dir)
    bug_ai_content = process_ai_tool("bug_ai", input_file_path, bug_ai_output_dir)

    # Prepare download link
    download_link = f"/download/{filename}"

    return doc_ai_content, bug_ai_content, download_link, {"display": "inline-block"}

@app.server.route("/download/<filename>")
def download_file(filename):
    output_dir = os.path.join("temp", "output_doc_ai")  # Default to doc_ai output for download
    file_path = os.path.join(output_dir, filename)
    if os.path.exists(file_path):
        return flask.send_file(file_path, as_attachment=True)
    return "File not found.", 404

# Run the app
if __name__ == "__main__":
    app.run_server(debug=True)
